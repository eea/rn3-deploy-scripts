pipeline {

    agent { node { label 'kubectl' } }
    tools {
        maven 'maven3'

    }

    parameters {
			choice(choices: ['PROD', 'STAGING', 'HOTFIX', 'DEV', 'TEST', 'SANDBOX'],description:'Select the target Environment', name: 'Env')
			string(defaultValue: 'dev', description: 'Set the branch', name: 'Brn', trim: true)
			string(defaultValue: 'v0.0.1-rc1-dev', description: 'Set the version to be deployed', name: 'Ver', trim: true)
	}
    
    stages {

        stage('Setting Default Environmental Variables') {
			
			steps {
				script {
					
					
					env.TARGET_ENV="reportnet"
					env.REPORTNET_BACKEND="https://api.reportnet.europa.eu"
					env.EULOGIN="https://auth.reportnet.europa.eu/auth/realms/Reportnet/protocol/openid-connect/auth?client_id=reportnet\\&redirect_uri=https%3A%2F%2Freportnet.europa.eu%2Feulogin%2F&response_mode=fragment\\&response_type=code\\&scope=openid"
					env.WEB_SOCKET="wss://reportnet.europa.eu/communication/reportnet-websocket"
					env.REPO="eeacms"
					//env.SENTRY_ENV="production"
					env.KEYCLOAK="true"
					
					env.REDIRECT_URI="https://reportnet.europa.eu/eulogin/"
					env.R3_CALLBACK_URL="https://api.reportnet.europa.eu"
					env.FME_TOPIC="Reportnet3_Topic"
					//env.ENVIRONMENT="kubectl-config-prod"
					
					
				}
			}
		}

 		stage('Deploy to Production') {
			when {				
				expression { params.Env == "PROD" }
				}

            steps {
						echo "ENV: ${params.Env}"
						echo "BRANCH: ${params.Brn}"
						echo "VERSION: ${params.Ver}"
 					
	 					script { 						
	 						echo "deploy to  ${params.Env}"
	 						//Set Environment to prod
	 						echo "Setting environment specific variables to ${params.Env}"
	 						env.SENTRY_ENV="production"
	 						env.ENVIRONMENT="kubectl-config-prod"
	 						echo "Update Database of ${params.Env}"
	 						sh '''
	 							mvn -f $WORKSPACE/helm/env/${params.Env}/database -DPOSTGRES_SERVER=10.50.4.153:31349 -DPOSTGRES_PASS=53p057n373.0! -DPOSTGRES_USER=postgres flyway:migrate
	 						'''
	 						echo "Scaling down services of ${params.Env}"
	 						withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
	 							sh '''
	 								kubectl -n $TARGET_ENV --kubeconfig=${FILE}  scale deploy api-gateway communication dataflow dataset document frontend recordstore rod ums validation collaboration --replicas=0
	 							'''
	 						}
	 						echo "Configure Common Application properties for ${params.Env}"
	 						withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
	 							sh '''
	 								helm install application-config $WORKSPACE/helm/env/${params.Env}/application-config -n $TARGET_ENV --kubeconfig=${FILE}
	 							'''
	 							sleep(20)
	 							sh '''
	 								helm uninstall application-config  -n $TARGET_ENV --kubeconfig=${FILE}
	 							'''
	 						}
	 					}
 	 		}
	 	}
 	}
}
