pipeline {

    agent { node { label 'kubectl' } }
    tools {
        maven 'maven3'

    }
    
	parameters([				choice(
									choices: ['prod', 'staging', 'hotfix', 'dev', 'test', 'sandbox'], 
									name: 'TARGET_ENV'
								),
								string(
									defaultValue: '', 
									description: 'Branch', 
									name: 'BRANCH', 
									trim: true
								),
								string(
									defaultValue: '', 
									description: 'Run deploy on release', 
									name: 'RELEASE_NAME', 
									trim: true
								),
								string(
									defaultValue: '', 
									description: 'Set Tags', 
									name: 'TAGS'
								)
							])

        // echo "tags_all: $tags"

        // def myParamObject = new JsonSlurper().parseText( tags_all )
        // for( def elem in tags_allObject ) {
        //     echo "$elem"	
    
    stages {

        stage('Setting Environmental Variables') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }						
			steps {
				script {
					
					
					env.TARGET_ENV="reportnet"
					env.REPORTNET_BACKEND="https://api.reportnet.europa.eu"
					env.EULOGIN="https://auth.reportnet.europa.eu/auth/realms/Reportnet/protocol/openid-connect/auth?client_id=reportnet\\&redirect_uri=https%3A%2F%2Freportnet.europa.eu%2Feulogin%2F&response_mode=fragment\\&response_type=code\\&scope=openid"
					env.WEB_SOCKET="wss://reportnet.europa.eu/communication/reportnet-websocket"
					env.REPO="eeacms"
					env.SENTRY_ENV="production"
					env.KEYCLOAK="true"
					
					env.REDIRECT_URI="https://reportnet.europa.eu/eulogin/"
					env.R3_CALLBACK_URL="https://api.reportnet.europa.eu"
					env.FME_TOPIC="Reportnet3_Topic"
					env.ENVIRONMENT="kubectl-config-prod"
					
					
				}
			}
	      }
       
		
		stage('Update Database') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }					    
            steps {
                sh '''
                    mvn -f $WORKSPACE/helm/database -DPOSTGRES_SERVER=10.50.4.153:31349 -DPOSTGRES_PASS=53p057n373.0! -DPOSTGRES_USER=postgres flyway:migrate
                '''
	          }
        }
		stage('Scaling down services'){
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }					
			steps {
					
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					
					sh '''
						kubectl -n $TARGET_ENV --kubeconfig=${FILE}  scale deploy api-gateway communication dataflow dataset document frontend recordstore rod ums validation collaboration --replicas=0
					'''
				}
			}
		}
        stage('Configure Common Application properties') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install application-config $WORKSPACE/helm/application-config -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall application-config  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
				}
            }
        }
        stage('Deploy API Gateway') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install api-gateway-preconfig $WORKSPACE/helm/reportnet-api-gateway/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall api-gateway-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade api-gateway $WORKSPACE/helm/reportnet-api-gateway/service -n $TARGET_ENV --kubeconfig=${FILE} -i  --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
					'''
				 }
				
            }
        }
		stage('Deploy Dataflow') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install dataflow-preconfig $WORKSPACE/helm/reportnet-dataflow/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall dataflow-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade dataflow $WORKSPACE/helm/reportnet-dataflow/service -n $TARGET_ENV  -i --kubeconfig=${FILE} --wait --set version=$RELEASE_NAME,fme.integration.callback.urlbase=$R3_CALLBACK_URL,fme.topic=$FME_TOPIC,sentry.environment=$SENTRY_ENV,replicas=3

					'''
				}
            }
        }
		stage('Deploy Recordstore') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install recordstore-preconfig $WORKSPACE/helm/reportnet-recordstore/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall recordstore-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					/*sh '''
						helm upgrade recordstore-persistence $WORKSPACE/helm/reportnet-recordstore/pvc -n $TARGET_ENV --kubeconfig=${FILE}  -i --wait --set repo=k8s-swi001:5000,tagSufix=_sandbox
					'''*/
					sh '''
						helm upgrade recordstore $WORKSPACE/helm/reportnet-recordstore/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV,replicas=2
					'''
					sleep(20)
				}
            }
        }
        stage('Deploy Validation') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install validation-preconfig $WORKSPACE/helm/reportnet-validation/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall validation-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade validation $WORKSPACE/helm/reportnet-validation/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,replicas=4,sentry.environment=$SENTRY_ENV
					'''
				}
				
            }
        }
		stage('Deploy Dataset') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }					
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install dataset-preconfig $WORKSPACE/helm/reportnet-dataset/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall dataset-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade dataset $WORKSPACE/helm/reportnet-dataset/service -n $TARGET_ENV --kubeconfig=${FILE}  -i --wait --set version=$RELEASE_NAME,replicas=3,sentry.environment=$SENTRY_ENV
					'''
				}
            }
        }
		stage('Deploy User Management') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install ums-preconfig $WORKSPACE/helm/reportnet-ums/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall ums-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade ums $WORKSPACE/helm/reportnet-ums/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV,replicas=2
					'''
				}
            }
        }
		stage('Deploy Document Container') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install document-preconfig $WORKSPACE/helm/reportnet-document/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall document-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade document $WORKSPACE/helm/reportnet-document/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
					'''
				}
            }
        }
		stage('Deploy Communication') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install communication-preconfig $WORKSPACE/helm/reportnet-communication/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall communication-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade communication $WORKSPACE/helm/reportnet-communication/service -n $TARGET_ENV --kubeconfig=${FILE}  -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
					'''
				}
            }
        }
		stage('Deploy Collaboration') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install collaboration-preconfig $WORKSPACE/helm/reportnet-collaboration/preconfig -n $TARGET_ENV  --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall collaboration-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade collaboration $WORKSPACE/helm/reportnet-collaboration/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
					'''
				}
            }
        }
		/*stage('Deploy Indexsearch') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
					sh '''
						helm install indexsearch-preconfig $WORKSPACE/helm/reportnet-indexsearch/preconfig -n $TARGET_ENV  --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall indexsearch-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade indexsearch $WORKSPACE/helm/reportnet-indexsearch/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
					'''
				}
            }
        }*/
		stage('Deploy ReportNet Frontend') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
				   sh '''
						helm upgrade frontend $WORKSPACE/helm/reportnet-frontend/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,backend=$REPORTNET_BACKEND,keycloak=$KEYCLOAK,websocket=$WEB_SOCKET,eulogin=$EULOGIN,sentry.environment=$SENTRY_ENV
					'''
				}
                
            }
        }
		
		stage('Deploy Rod') {
			when {
				not {
					environment name: 'RELEASE_NAME', value: ''
                }
            }			
            steps {
				withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
				  sh '''
						helm install rod-preconfig $WORKSPACE/helm/reportnet-rod/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sleep(20)
					sh '''
						helm uninstall rod-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
					'''
					sh '''
						helm upgrade rod $WORKSPACE/helm/reportnet-rod/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
					'''
				}                
            }
        }
        
        
    }
    post {
		always {
		  cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, deleteDirs: true)
		  script {
			def details = """<h1>${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ${currentBuild.currentResult}</h1>
							 <p>Check console output at <a href="${env.BUILD_URL}/display/redirect">${env.JOB_BASE_NAME} - #${env.BUILD_NUMBER}</a></p>
						  """
			emailext(
			subject: '$DEFAULT_SUBJECT',
			body: details,
			attachLog: true,
			compressLog: true,
			recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'CulpritsRecipientProvider']]
			)
		  }
		}
  }
}
