pipeline {

    agent { node { label 'kubectl' } }
    tools {
        maven 'maven3'

    }

    parameters {
			choice(defaultValue: 'DEV',choices: ['PROD', 'STAGING', 'HOTFIX', 'DEV', 'TEST', 'SANDBOX'],description:'Select the target Environment', name: 'Env')
			string(defaultValue: 'dev', description: 'Set the branch', name: 'Brn', trim: true)
			string(defaultValue: 'v0.0.1-rc1-dev', description: 'Set the version to be deployed', name: 'Ver', trim: true)
	}
    
    stages {

        stage('Setting Default Environmental Variables') {
			
			steps {
				script {
					env.TARGET_ENV="reportnet"
					env.REPORTNET_BACKEND="https://api.reportnet.europa.eu"
					env.EULOGIN="https://auth.reportnet.europa.eu/auth/realms/Reportnet/protocol/openid-connect/auth?client_id=reportnet\\&redirect_uri=https%3A%2F%2Freportnet.europa.eu%2Feulogin%2F&response_mode=fragment\\&response_type=code\\&scope=openid"
					env.WEB_SOCKET="wss://reportnet.europa.eu/communication/reportnet-websocket"
					env.REPO="eeacms"
					env.KEYCLOAK="true"
					env.REDIRECT_URI="https://reportnet.europa.eu/eulogin/"
					env.R3_CALLBACK_URL="https://api.reportnet.europa.eu"
					env.FME_TOPIC="Reportnet3_Topic"
				}
			}
		}

 		stage('Deploy to DEV') {
			when {				
				expression { params.Env == "DEV" }
				}

            steps {
						echo "ENV: ${params.Env}"
						echo "BRANCH: ${params.Brn}"
						echo "VERSION: ${params.Ver}"


	 					script { 	
							env.SENTRY_ENV="dev"
							env.ENVIRONMENT="kubectl-config-dev" 
							env.DEPLOYMENT_ENV="dev"
							env.DEPLOYMENT_BRN="${params.Brn}"
							env.DEPLOYMENT_VAR="${params.Ver}"



	 						echo "deploy to  ${params.Env}"
	 						//Set Environment to prod
	 						echo "Setting environment specific variables to ${params.Env}"

	 						echo "Update Database of ${params.Env}"
	 						sh '''
	 							mvn -f $WORKSPACE/helm/database -DPOSTGRES_SERVER=10.50.4.153:31349 -DPOSTGRES_PASS=53p057n373.0! -DPOSTGRES_USER=postgres flyway:migrate
	 						'''
	 						echo "Scaling down services of ${params.Env}"
	 						withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
	 							sh '''
	 								kubectl -n $TARGET_ENV --kubeconfig=${FILE}  scale deploy api-gateway communication dataflow dataset document frontend recordstore rod ums validation collaboration --replicas=0
	 							'''
	 						}
	 						echo "Configure Common Application properties for ${params.Env}"
	 						withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
	 							sh '''
	 								helm install application-config $WORKSPACE/helm/env/$DEPLOYMENT_ENV/application-config -n $TARGET_ENV --kubeconfig=${FILE}
	 							'''
	 							sleep(20)
	 							sh '''
	 								helm uninstall application-config  -n $TARGET_ENV --kubeconfig=${FILE}
	 							'''
	 						}
	 						echo "Deploy API Gateway of ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install api-gateway-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-api-gateway/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall api-gateway-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade api-gateway $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-api-gateway/service -n $TARGET_ENV --kubeconfig=${FILE} -i  --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
								'''
							}
	 						echo "Deploy Dataflow of ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install dataflow-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-dataflow/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall dataflow-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade dataflow $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-dataflow/service -n $TARGET_ENV  -i --kubeconfig=${FILE} --wait --set version=$RELEASE_NAME,fme.integration.callback.urlbase=$R3_CALLBACK_URL,fme.topic=$FME_TOPIC,sentry.environment=$SENTRY_ENV,replicas=3
									'''
								}
							}
	 						echo "Deploy Recordstore of ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install recordstore-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-recordstore/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall recordstore-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								/*sh '''
									helm upgrade recordstore-persistence $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-recordstore/pvc -n $TARGET_ENV --kubeconfig=${FILE}  -i --wait --set repo=k8s-swi001:5000,tagSufix=_sandbox
								'''*/
								sh '''
									helm upgrade recordstore $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-recordstore/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV,replicas=2
								'''
								sleep(20)
							}
	 						echo "Deploy Validation on ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install validation-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-validation/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall validation-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade validation $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-validation/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,replicas=4,sentry.environment=$SENTRY_ENV
								'''
							}
	 						echo "Deploy User Management of ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install ums-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-ums/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall ums-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade ums $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-ums/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV,replicas=2
								'''
							}
	 						echo "Deploy Document Container on ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install document-preconfig$WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-document/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall document-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade document $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-document/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
								'''
							}
	 						echo "Deploy Communication for ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install communication-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-communication/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall communication-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade communication $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-communication/service -n $TARGET_ENV --kubeconfig=${FILE}  -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
								'''
							}
	 						echo "Deploy Collaboration of ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install collaboration-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/env/$DEPLOYMENT_ENV/reportnet-collaboration/preconfig -n $TARGET_ENV  --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall collaboration-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade collaboration $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-collaboration/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
								'''
							}

	 						/*echo "Deploy Indexsearch for ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
								sh '''
									helm install indexsearch-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-indexsearch/preconfig -n $TARGET_ENV  --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall indexsearch-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade indexsearch $$WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-indexsearch/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
								'''
							}*/
	 						echo "Deploy ReportNet Frontend for ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
							sh '''
									helm upgrade frontend $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-frontend/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,backend=$REPORTNET_BACKEND,keycloak=$KEYCLOAK,websocket=$WEB_SOCKET,eulogin=$EULOGIN,sentry.environment=$SENTRY_ENV
								'''
							}
	 						echo "Deploy Rod for ${params.Env}"
							withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'FILE')]) {
							sh '''
									helm install rod-preconfig $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-rod/preconfig -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sleep(20)
								sh '''
									helm uninstall rod-preconfig  -n $TARGET_ENV --kubeconfig=${FILE}
								'''
								sh '''
									helm upgrade rod $WORKSPACE/helm/env/$DEPLOYMENT_ENV/reportnet-rod/service -n $TARGET_ENV --kubeconfig=${FILE} -i --wait --set version=$RELEASE_NAME,sentry.environment=$SENTRY_ENV
								'''
							} 
	 					}
 	 		}
	 	}
 	}
    post {
		always {
		  cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, deleteDirs: true)
		  script {
			def details = """<h1>${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ${currentBuild.currentResult}</h1>
							 <p>Check console output at <a href="${env.BUILD_URL}/display/redirect">${env.JOB_BASE_NAME} - #${env.BUILD_NUMBER}</a></p>
						  """
			emailext(
			subject: '$DEFAULT_SUBJECT',
			body: details,
			attachLog: true,
			compressLog: true,
			recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'CulpritsRecipientProvider']]
			)
		  }
		}
	}
}
